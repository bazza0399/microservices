version: "2.2"
services:
  Client:
    container_name: Client
    build: ./Client
    ports:
      - "8090:8090"
    hostname: client
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://serviceregistry:8761/eureka/
    image: "client"
    depends_on:
      - Eureka  
  Product:
    container_name: Product
    build: ./Product
    ports:
      - "8082:8082"
    hostname: product
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://serviceregistry:8761/eureka/
    image: "product"
    depends_on:
      - Eureka
  invoices-microservices:
    container_name: facture-service
    build: ./facture-service
    ports:
      - "8087:8087"
    hostname: invoices-microservices
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://serviceregistry:8761/eureka/
    image: "invoices-microservices"
    depends_on:
      - Eureka 
  Eureka:
    container_name: eureuka
    build: ./eureuka
    ports:
      - "8761:8761"
    hostname: serviceregistry
    image: "eureka"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://serviceregistry:8761/eureka/
  
  Zuul:
    container_name: api-gateway
    image: "zuul"
    build: ./Zuul-Gateway
    ports:
      - "8762:8762"
    hostname: Zuul
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://serviceregistry:8761/eureka/
    depends_on:
      - "Eureka"

  prometheus:
    image: prom/prometheus
    restart: always
    volumes:
      - ./prometheus:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
    depends_on:
      - cadvisor

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    ports:
      - 9100:9100
    restart: always
    deploy:
      mode: global
  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    restart: always
    deploy:
      mode: global

  grafana:
    image: grafana/grafana
    user: '472'
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: user
      GF_SECURITY_ADMIN_PASSWORD: user
      GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource'
    volumes:
      - "./grafana.ini:/etc/grafana/grafana.ini"
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    ports:
      - 3000:3000
    depends_on:
      - prometheus
  Auth:
    container_name: Auth
    build: ./Auth
    ports:
      - "4001:4001"
    hostname: Auth
    image: "auth"
    depends_on:
      - "db"
      - Eureka 
  db:
    container_name: Mongo
    image: "mongo:5-focal"
    ports:
      - "27017:27017"
    hostname: Mongo
    depends_on:
      - "Eureka"
volumes:
  db:
  prometheus_data: {}
  grafana_data: {}
  grafana-storage:
